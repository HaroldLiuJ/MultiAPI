[{"name": "facebook_dino_vits8", "description": "Vision Transformer (ViT) model trained using the DINO method. It was introduced in the paper Emerging Properties in Self-Supervised Vision Transformers by Mathilde Caron, Hugo Touvron, Ishan Misra, Herv Jgou, Julien Mairal, Piotr Bojanowski, Armand Joulin and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}}, "required": ["image_path"]}}, {"name": "google_vit_base_patch16_224_in21k", "description": "The Vision Transformer (ViT) is a transformer encoder model (BERT-like) pretrained on ImageNet-21k (14 million images, 21,843 classes) at resolution 224x224. It was introduced in the paper An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale by Dosovitskiy et al. and first released in this repository. However, the weights were converted from the timm repository by Ross Wightman, who already converted the weights from JAX to PyTorch. Credits go to him.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file to be processed"}}, "required": ["image_path"]}}, {"name": "microsoft_xclip_base_patch16_zero_shot", "description": "X-CLIP is a minimal extension of CLIP for general video-language understanding. The model is trained in a contrastive way on (video, text) pairs. This allows the model to be used for tasks like zero-shot, few-shot or fully supervised video classification and video-text retrieval.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file"}, "labels": {"type": "string", "description": "Labels are the class labels or target labels associated with the videos or text used for classification or retrieval tasks in the X-CLIP model."}}, "required": ["video_path", "labels"]}}, {"name": "CompVis_stable_diffusion_v1_4", "description": "Stable Diffusion is a latent text-to-image diffusion model capable of generating photo-realistic images given any text input. The Stable-Diffusion-v1-4 checkpoint was fine-tuned on 225k steps at resolution 512x512 on laion-aesthetics v2 5+ and 10% dropping of the text-conditioning to improve classifier-free guidance sampling. This model is intended for research purposes and can be used for generating artworks, design, educational or creative tools, and research on generative models.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "The text input prompt for generating images"}, "output_path": {"type": "string", "description": "The path to the directory where the generated images will be saved."}}, "required": ["prompt", "output_path"]}}, {"name": "stabilityai_sd_vae_ft_mse", "description": "This model is a fine-tuned VAE decoder for the Stable Diffusion Pipeline. It is designed to be used with the diffusers library and can be integrated into existing workflows by including a vae argument to the StableDiffusionPipeline. The model has been finetuned on a 1:1 ratio of LAION-Aesthetics and LAION-Humans datasets and has been evaluated on COCO 2017 and LAION-Aesthetics 5+ datasets.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "The prompt given to the VAE decoder for generating output"}, "output_path": {"type": "string", "description": "The file path to save the output of the Stable Diffusion Pipeline model."}}, "required": ["prompt", "output_path"]}}, {"name": "Realistic_Vision_V1_4", "description": "Realistic_Vision_V1.4 is a text-to-image model that generates high-quality and detailed images based on textual prompts. It can be used for various applications such as generating realistic portraits, landscapes, and other types of images.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "A textual prompt that specifies the desired image"}, "negative_prompt": {"type": "string", "description": "The textual prompt for generating a negative image"}}, "required": ["prompt", "negative_prompt"]}}, {"name": "stabilityai_sd_vae_ft_ema", "description": "This is a fine-tuned VAE decoder for the Stable Diffusion Pipeline. It has been fine-tuned on a 1:1 ratio of LAION-Aesthetics and LAION-Humans datasets. The decoder can be used as a drop-in replacement for the existing autoencoder.", "parameters": {"type": "object", "properties": {}, "required": []}}, {"name": "EimisAnimeDiffusion_1_0v", "description": "EimisAnimeDiffusion_1.0v is a text-to-image model trained with high-quality and detailed anime images. It works well on anime and landscape generations and supports a Gradio Web UI.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "The description of the argument"}}, "required": ["prompt"]}}, {"name": "Linaqruf_anything_v3_0", "description": "A text-to-image model that generates images from text descriptions.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "A text description that serves as the prompt for generating images."}, "max_length": {"type": "integer", "description": "The maximum length of the text description"}}, "required": ["prompt"]}}, {"name": "text_to_image", "description": "Analog Diffusion is a dreambooth model trained on a diverse set of analog photographs. It can generate images based on text prompts with an analog style. Use the activation token 'analog style' in your prompt to get the desired output. The model is available on the Hugging Face Inference API and can be used with the transformers library.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "The prompt text to generate an analog-style image"}, "output_path": {"type": "string", "description": "The path to save the generated image"}}, "required": ["prompt", "output_path"]}}, {"name": "Lykon_DreamShaper", "description": "Dream Shaper is a text-to-image model that generates artistic images based on the given input text. Read more about this model here: https://civitai.com/models/4384/dreamshaper", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "The input text prompt for generating artistic images"}}, "required": ["prompt"]}}, {"name": "darkstorm2150_Protogen_v2_2_Official_Release", "description": "Protogen v2.2 is a text-to-image model that generates high-quality images based on text prompts. It was warm-started with Stable Diffusion v1-5 and fine-tuned on a large amount of data from large datasets new and trending on civitai.com. The model can be used with the Stable Diffusion Pipeline and supports trigger words like 'modelshoot style' to enforce camera capture.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "The text prompt to generate images"}, "output_path": {"type": "string", "description": "The path to the directory where the generated images will be saved."}}, "required": ["prompt", "output_path"]}}, {"name": "gsdf_Counterfeit_V2_5", "description": "Counterfeit-V2.5 is a text-to-image model that generates anime-style images based on text prompts. It has been updated for ease of use and can be used with negative prompts to create high-quality images.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "The text prompt for generating anime-style images"}}, "required": ["prompt"]}}, {"name": "vintedois_diffusion_v0_1", "description": "Vintedois (22h) Diffusion model trained by Predogl and piEsposito with open weights, configs and prompts. This model generates beautiful images without a lot of prompt engineering. It can also generate high fidelity faces with a little amount of steps.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "The prompt used as input for the model."}, "output_path": {"type": "string", "description": "The output path where the generated images will be saved."}}, "required": ["prompt", "output_path"]}}, {"name": "kha_white_manga_ocr_base", "description": "Optical character recognition for Japanese text, with the main focus being Japanese manga. It uses Vision Encoder Decoder framework. Manga OCR can be used as a general purpose printed Japanese OCR, but its main goal was to provide a high quality text recognition, robust against various scenarios specific to manga: both vertical and horizontal text, text with furigana, text overlaid on images, wide variety of fonts and font styles, and low quality images.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that contains the Japanese manga text to be recognized."}}, "required": ["image_path"]}}, {"name": "blip_image_captioning_base", "description": "BLIP (Bootstrapping Language-Image Pre-training) is a new vision-language pre-training (VLP) framework that transfers flexibly to both vision-language understanding and generation tasks. It effectively utilizes noisy web data by bootstrapping the captions, where a captioner generates synthetic captions and a filter removes the noisy ones. This model is pre-trained on the COCO dataset with a base architecture (ViT base backbone).", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file"}, "prompt": {"type": "string", "description": "The prompt or input text for generating image captions."}}, "required": ["image_path", "prompt"]}}, {"name": "blip_image_captioning_large", "description": "BLIP is a Vision-Language Pre-training (VLP) framework that achieves state-of-the-art results on a wide range of vision-language tasks, such as image-text retrieval, image captioning, and VQA. It effectively utilizes noisy web data by bootstrapping the captions, where a captioner generates synthetic captions and a filter removes the noisy ones.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the image to be captioned."}, "prompt": {"type": "string", "description": "The prompt for generating image captions"}}, "required": ["image_path", "prompt"]}}, {"name": "microsoft_trocr_base_printed", "description": "TrOCR model fine-tuned on the SROIE dataset. It was introduced in the paper TrOCR: Transformer-based Optical Character Recognition with Pre-trained Models by Li et al. and first released in this repository. The TrOCR model is an encoder-decoder model, consisting of an image Transformer as encoder, and a text Transformer as decoder. The image encoder was initialized from the weights of BEiT, while the text decoder was initialized from the weights of RoBERTa.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that needs to be recognized"}}, "required": ["image_path"]}}, {"name": "blip2_opt_2_7b", "description": "BLIP-2 model, leveraging OPT-2.7b (a large language model with 2.7 billion parameters). It was introduced in the paper BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models by Li et al. and first released in this repository. The goal for the model is to predict the next text token, given the query embeddings and the previous text. This allows the model to be used for tasks like image captioning, visual question answering (VQA), and chat-like conversations by feeding the image and the previous conversation as prompt to the model.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that contains the image to be used as a prompt for the BLIP-2 model."}, "prompt": {"type": "string", "description": "The query embeddings and the previous text prompt."}}, "required": ["image_path", "prompt"]}}, {"name": "microsoft_trocr_small_handwritten", "description": "TrOCR model fine-tuned on the IAM dataset. It was introduced in the paper TrOCR: Transformer-based Optical Character Recognition with Pre-trained Models by Li et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file to be processed"}}, "required": ["image_path"]}}, {"name": "naver_clova_ix_donut_base", "description": "Donut consists of a vision encoder (Swin Transformer) and a text decoder (BART). Given an image, the encoder first encodes the image into a tensor of embeddings (of shape batch_size, seq_len, hidden_size), after which the decoder autoregressively generates text, conditioned on the encoding of the encoder.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}, "prompt": {"type": "string", "description": "The image prompt provided to the function"}}, "required": ["image_path", "prompt"]}}, {"name": "microsoft_git_base_coco", "description": "GIT (short for GenerativeImage2Text) model, base-sized version, fine-tuned on COCO. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository. The model is a Transformer decoder conditioned on both CLIP image tokens and text tokens. It can be used for tasks like image and video captioning, visual question answering (VQA) on images and videos, and even image classification (by simply conditioning the model on the image and asking it to generate a class for it in text).", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path to the image that will be used for generating the text output"}}, "required": ["image_path"]}}, {"name": "microsoft_trocr_large_handwritten", "description": "TrOCR model fine-tuned on the IAM dataset. It was introduced in the paper TrOCR: Transformer-based Optical Character Recognition with Pre-trained Models by Li et al. and first released in this repository. The TrOCR model is an encoder-decoder model, consisting of an image Transformer as encoder, and a text Transformer as decoder. The image encoder was initialized from the weights of BEiT, while the text decoder was initialized from the weights of RoBERTa.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the handwritten image to be processed"}}, "required": ["image_path"]}}, {"name": "ydshieh_vit_gpt2_coco_en", "description": "A proof-of-concept model for the Hugging Face FlaxVisionEncoderDecoder Framework that produces reasonable image captioning results.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image file to be processed"}}, "required": ["image_path"]}}, {"name": "microsoft_trocr_base_handwritten", "description": "TrOCR model fine-tuned on the IAM dataset. It was introduced in the paper TrOCR: Transformer-based Optical Character Recognition with Pre-trained Models by Li et al. and first released in this repository. The TrOCR model is an encoder-decoder model, consisting of an image Transformer as encoder, and a text Transformer as decoder. The image encoder was initialized from the weights of BEiT, while the text decoder was initialized from the weights of RoBERTa.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file to be processed."}}, "required": ["image_path"]}}, {"name": "donut_base_finetuned_cord_v2", "description": "Donut consists of a vision encoder (Swin Transformer) and a text decoder (BART). Given an image, the encoder first encodes the image into a tensor of embeddings (of shape batch_size, seq_len, hidden_size), after which the decoder autoregressively generates text, conditioned on the encoding of the encoder. This model is fine-tuned on CORD, a document parsing dataset.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image file to be processed"}}, "required": ["image_path"]}}, {"name": "git_large_coco", "description": "GIT (short for GenerativeImage2Text) model, large-sized version, fine-tuned on COCO. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path to the image that will be processed by the GIT model"}, "question": {"type": "string", "description": "The question input to the Generative Image-to-text Transformer model"}}, "required": ["image_path", "question"]}}, {"name": "google_pix2struct_base", "description": "Pix2Struct is an image encoder - text decoder model that is trained on image-text pairs for various tasks, including image captioning and visual question answering. The model is pretrained by learning to parse masked screenshots of web pages into simplified HTML. It can achieve state-of-the-art results in six out of nine tasks across four domains: documents, illustrations, user interfaces, and natural images.", "parameters": {"type": "object", "properties": {"PATH_TO_SAVE": {"type": "string", "description": "The path to save the model weights and other necessary files."}, "USERNAME": {"type": "string", "description": "The username to be used as input for the Pix2Struct image encoder - text decoder model."}, "MODEL_NAME": {"type": "string", "description": "The name of the Google Pix2Struct model to be used"}}, "required": ["PATH_TO_SAVE", "USERNAME", "MODEL_NAME"]}}, {"name": "google_pix2struct_textcaps_base", "description": "Pix2Struct is an image encoder - text decoder model that is trained on image-text pairs for various tasks, including image captioning and visual question answering. It is pretrained by learning to parse masked screenshots of web pages into simplified HTML. The web, with its richness of visual elements cleanly reflected in the HTML structure, provides a large source of pretraining data well suited to the diversity of downstream tasks.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that needs to be encoded"}}, "required": ["image_path"]}}, {"name": "git_base", "description": "GIT (short for GenerativeImage2Text) model, base-sized version. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository. The model is trained using 'teacher forcing' on a lot of (image, text) pairs. The goal for the model is simply to predict the next text token, giving the image tokens and previous text tokens. This allows the model to be used for tasks like image and video captioning, visual question answering (VQA) on images and videos, and even image classification (by simply conditioning the model on the image and asking it to generate a class for it in text).", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}}, "required": ["image"]}}, {"name": "microsoft_trocr_large_printed", "description": "TrOCR model fine-tuned on the SROIE dataset. It was introduced in the paper TrOCR: Transformer-based Optical Character Recognition with Pre-trained Models by Li et al. and first released in this repository. The TrOCR model is an encoder-decoder model, consisting of an image Transformer as encoder, and a text Transformer as decoder. The image encoder was initialized from the weights of BEiT, while the text decoder was initialized from the weights of RoBERTa.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path to the input image for OCR"}}, "required": ["image_path"]}}, {"name": "git_large_textcaps", "description": "GIT (short for GenerativeImage2Text) model, large-sized version, fine-tuned on TextCaps. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository. The model is trained using 'teacher forcing' on a lot of (image, text) pairs. The goal for the model is simply to predict the next text token, giving the image tokens and previous text tokens. This allows the model to be used for tasks like image and video captioning, visual question answering (VQA) on images and videos, and even image classification (by simply conditioning the model on the image and asking it to generate a class for it in text).", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the image to be processed."}}, "required": ["image_path"]}}, {"name": "git_large_r_textcaps", "description": "GIT (short for GenerativeImage2Text) model, large-sized version, fine-tuned on TextCaps. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository. The model is trained using 'teacher forcing' on a lot of (image, text) pairs. The goal for the model is simply to predict the next text token, giving the image tokens and previous text tokens. This allows the model to be used for tasks like image and video captioning, visual question answering (VQA) on images and videos, and even image classification (by simply conditioning the model on the image and asking it to generate a class for it in text).", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that will be processed by the GIT model"}}, "required": ["image_path"]}}, {"name": "microsoft_trocr_small_stage1", "description": "TrOCR pre-trained only model. It was introduced in the paper TrOCR: Transformer-based Optical Character Recognition with Pre-trained Models by Li et al. and first released in this repository. The TrOCR model is an encoder-decoder model, consisting of an image Transformer as encoder, and a text Transformer as decoder. The image encoder was initialized from the weights of DeiT, while the text decoder was initialized from the weights of UniLM. Images are presented to the model as a sequence of fixed-size patches (resolution 16x16), which are linearly embedded. One also adds absolute position embeddings before feeding the sequence to the layers of the Transformer encoder. Next, the Transformer text decoder autoregressively generates tokens.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image file to be processed by the TrOCR model."}}, "required": ["image_path"]}}, {"name": "microsoft_trocr_small_printed", "description": "TrOCR model fine-tuned on the SROIE dataset. It was introduced in the paper TrOCR: Transformer-based Optical Character Recognition with Pre-trained Models by Li et al. and first released in this repository. The TrOCR model is an encoder-decoder model, consisting of an image Transformer as encoder, and a text Transformer as decoder. The image encoder was initialized from the weights of DeiT, while the text decoder was initialized from the weights of UniLM.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file"}}, "required": ["image_path"]}}, {"name": "dpt_large_redesign", "description": "A depth estimation model based on the DPT architecture.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "The description of the argument"}}, "required": ["prompt"]}}, {"name": "glpn_kitti", "description": "Global-Local Path Networks (GLPN) model trained on KITTI for monocular depth estimation. It was introduced in the paper Global-Local Path Networks for Monocular Depth Estimation with Vertical CutDepth by Kim et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the input image"}, "output_path": {"type": "string", "description": "The path to save the output of the GLPN model"}}, "required": ["image_path", "output_path"]}}, {"name": "Intel_dpt_large", "description": "Dense Prediction Transformer (DPT) model trained on 1.4 million images for monocular depth estimation. Introduced in the paper Vision Transformers for Dense Prediction by Ranftl et al. (2021). DPT uses the Vision Transformer (ViT) as backbone and adds a neck + head on top for monocular depth estimation.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image to be used as input for monocular depth estimation"}, "output_path": {"type": "string", "description": "The path to save the output of the DPT model."}}, "required": ["image_path", "output_path"]}}, {"name": "glpn_nyu", "description": "Global-Local Path Networks (GLPN) model trained on NYUv2 for monocular depth estimation. It was introduced in the paper Global-Local Path Networks for Monocular Depth Estimation with Vertical CutDepth by Kim et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image file to be processed by the GLPN model"}, "output_path": {"type": "string", "description": "The output path where the depth estimation results will be saved."}}, "required": ["image_path", "output_path"]}}, {"name": "glpn_nyu_finetuned_diode", "description": "This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path to the image."}, "output_path": {"type": "string", "description": "The path to save the output files"}}, "required": ["image_path", "output_path"]}}, {"name": "intel_dpt_hybrid_midas", "description": "Dense Prediction Transformer (DPT) model trained on 1.4 million images for monocular depth estimation. Introduced in the paper Vision Transformers for Dense Prediction by Ranftl et al. (2021) and first released in this repository. DPT uses the Vision Transformer (ViT) as backbone and adds a neck + head on top for monocular depth estimation. This repository hosts the hybrid version of the model as stated in the paper. DPT-Hybrid diverges from DPT by using ViT-hybrid as a backbone and taking some activations from the backbone.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image that the Dense Prediction Transformer (DPT) model will be applied to for monocular depth estimation."}, "output_path": {"type": "string", "description": "The path to the directory where the output will be saved"}}, "required": ["image_path", "output_path"]}}, {"name": "glpn_nyu_finetuned_diode_221122_030603", "description": "This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}, "output_path": {"type": "string", "description": "The path where the output will be saved."}}, "required": ["image_path", "output_path"]}}, {"name": "glpn_kitti_finetuned_diode", "description": "This model is a fine-tuned version of vinvino02/glpn-kitti on the diode-subset dataset.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}, "output_path": {"type": "string", "description": "The file path to output the results"}}, "required": ["image_path", "output_path"]}}, {"name": "glpn_nyu_finetuned_diode_221122_044810", "description": "This model is a fine-tuned version of vinvino02/glpn-nyu on the diode-subset dataset.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file"}, "output_path": {"type": "string", "description": "The file path where the output will be saved"}}, "required": ["image_path", "output_path"]}}, {"name": "glpn_kitti_finetuned_diode_221214_123047", "description": "This model is a fine-tuned version of vinvino02/glpn-kitti on the diode-subset dataset. It is used for depth estimation in computer vision applications.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that needs to be processed"}, "output_path": {"type": "string", "description": "The path to the output directory where the results will be saved"}}, "required": ["image_path", "output_path"]}}, {"name": "microsoft_resnet_50", "description": "ResNet-50 v1.5 is a pre-trained convolutional neural network for image classification on the ImageNet-1k dataset at resolution 224x224. It was introduced in the paper Deep Residual Learning for Image Recognition by He et al. ResNet (Residual Network) democratized the concepts of residual learning and skip connections, enabling the training of much deeper models. ResNet-50 v1.5 differs from the original model in the bottleneck blocks which require downsampling, v1 has stride = 2 in the first 1x1 convolution, whereas v1.5 has stride = 2 in the 3x3 convolution. This difference makes ResNet50 v1.5 slightly more accurate but comes with a small performance drawback.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file for which the ResNet-50 v1.5 model should perform classification."}}, "required": ["image_path"]}}, {"name": "facebook_convnext_large_224", "description": "ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them. The authors started from a ResNet and 'modernized' its design by taking the Swin Transformer as inspiration.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}}, "required": ["image_path"]}}, {"name": "microsoft_beit_base_patch16_224_pt22k_ft22k", "description": "BEiT model pre-trained in a self-supervised fashion on ImageNet-22k - also called ImageNet-21k (14 million images, 21,841 classes) at resolution 224x224, and fine-tuned on the same dataset at resolution 224x224. It was introduced in the paper BEIT: BERT Pre-Training of Image Transformers by Hangbo Bao, Li Dong and Furu Wei and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file to be processed."}}, "required": ["image_path"]}}, {"name": "google_vit_base_patch16_224", "description": "Vision Transformer (ViT) model pre-trained on ImageNet-21k (14 million images, 21,843 classes) at resolution 224x224, and fine-tuned on ImageNet 2012 (1 million images, 1,000 classes) at resolution 224x224. It was introduced in the paper An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale by Dosovitskiy et al.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file"}}, "required": ["image_path"]}}, {"name": "martinezomg_vit_base_patch16_224_diabetic_retinopathy", "description": "This model is a fine-tuned version of google/vit-base-patch16-224 on the None dataset. It is designed for image classification tasks, specifically for diabetic retinopathy detection.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that needs to be classified for diabetic retinopathy detection."}}, "required": ["image_path"]}}, {"name": "nateraw_vit_age_classifier", "description": "A vision transformer finetuned to classify the age of a given person's face.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image file to be classified"}}, "required": ["image_path"]}}, {"name": "google_vit_base_patch16_384", "description": "Vision Transformer (ViT) model pre-trained on ImageNet-21k (14 million images, 21,843 classes) at resolution 224x224, and fine-tuned on ImageNet 2012 (1 million images, 1,000 classes) at resolution 384x384. It was introduced in the paper An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale by Dosovitskiy et al. Images are presented to the model as a sequence of fixed-size patches (resolution 16x16), which are linearly embedded. One also adds a [CLS] token to the beginning of a sequence to use it for classification tasks. One also adds absolute position embeddings before feeding the sequence to the layers of the Transformer encoder.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}}, "required": ["image_path"]}}, {"name": "microsoft_beit_base_patch16_224", "description": "BEiT model pre-trained in a self-supervised fashion on ImageNet-21k (14 million images, 21,841 classes) at resolution 224x224, and fine-tuned on ImageNet 2012 (1 million images, 1,000 classes) at resolution 224x224.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}}, "required": ["image_path"]}}, {"name": "lysandre_tiny_vit_random", "description": "A tiny-vit-random model for image classification using Hugging Face Transformers.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file to be classified."}}, "required": ["image_path"]}}, {"name": "fxmarty_resnet_tiny_beans", "description": "A model trained on the beans dataset, just for testing and having a really tiny model.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}}, "required": ["image_path"]}}, {"name": "google_mobilenet_v1_0_75_192", "description": "MobileNet V1 model pre-trained on ImageNet-1k at resolution 192x192. It was introduced in MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications by Howard et al, and first released in this repository. MobileNets are small, low-latency, low-power models parameterized to meet the resource constraints of a variety of use cases. They can be built upon for classification, detection, embeddings and segmentation similar to how other popular large scale models, such as Inception, are used. MobileNets can be run efficiently on mobile devices.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "Path to the input image file."}}, "required": ["image_path"]}}, {"name": "nvidia_mit_b0", "description": "SegFormer encoder fine-tuned on Imagenet-1k. It was introduced in the paper SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers by Xie et al. and first released in this repository. SegFormer consists of a hierarchical Transformer encoder and a lightweight all-MLP decode head to achieve great results on semantic segmentation benchmarks such as ADE20K and Cityscapes.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the input image"}}, "required": ["image_path"]}}, {"name": "vit_base_patch16_224_augreg2_in21k_ft_in1k", "description": "A Vision Transformer model for image classification, pretrained on ImageNet-21k and fine-tuned on ImageNet-1k.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image file to be processed."}}, "required": ["image_path"]}}, {"name": "google_mobilenet_v2_1_0_224", "description": "MobileNet V2 model pre-trained on ImageNet-1k at resolution 224x224. It was introduced in MobileNetV2: Inverted Residuals and Linear Bottlenecks by Mark Sandler, Andrew Howard, Menglong Zhu, Andrey Zhmoginov, Liang-Chieh Chen. MobileNets are small, low-latency, low-power models parameterized to meet the resource constraints of a variety of use cases. They can be built upon for classification, detection, embeddings and segmentation similar to how other popular large scale models, such as Inception, are used. MobileNets can be run efficiently on mobile devices.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that needs to be processed by the MobileNet V2 model."}}, "required": ["image_path"]}}, {"name": "microsoft_swin_tiny_patch4_window7_224", "description": "Swin Transformer model trained on ImageNet-1k at resolution 224x224. It was introduced in the paper Swin Transformer: Hierarchical Vision Transformer using Shifted Windows by Liu et al. and first released in this repository. The Swin Transformer is a type of Vision Transformer. It builds hierarchical feature maps by merging image patches (shown in gray) in deeper layers and has linear computation complexity to input image size due to computation of self-attention only within each local window (shown in red). It can thus serve as a general-purpose backbone for both image classification and dense recognition tasks.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the input image file."}}, "required": ["image_path"]}}, {"name": "microsoft_swinv2_tiny_patch4_window8_256", "description": "Swin Transformer v2 model pre-trained on ImageNet-1k at resolution 256x256. It was introduced in the paper Swin Transformer V2: Scaling Up Capacity and Resolution by Liu et al. and first released in this repository. The Swin Transformer is a type of Vision Transformer. It builds hierarchical feature maps by merging image patches in deeper layers and has linear computation complexity to input image size due to computation of self-attention only within each local window. Swin Transformer v2 adds 3 main improvements: 1) a residual-post-norm method combined with cosine attention to improve training stability; 2) a log-spaced continuous position bias method to effectively transfer models pre-trained using low-resolution images to downstream tasks with high-resolution inputs; 3) a self-supervised pre-training method, SimMIM, to reduce the needs of vast labeled images.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path to the input image."}}, "required": ["image_path"]}}, {"name": "anime_ai_detect", "description": "A BEiT classifier to see if anime art was made by an AI or a human.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "The prompt to be used for AI vs. human classification"}}, "required": ["prompt"]}}, {"name": "swin_tiny_patch4_window7_224_bottom_cleaned_data", "description": "This model is a fine-tuned version of microsoft/swin-tiny-patch4-window7-224 on the imagefolder dataset.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}}, "required": ["image_path"]}}, {"name": "microsoft_table_transformer_structure_recognition", "description": "Table Transformer (DETR) model trained on PubTables1M for detecting the structure (like rows, columns) in tables.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the input image"}}, "required": ["api_key", "table_image_path"]}}, {"name": "facebook_regnet_y_008", "description": "RegNet model trained on imagenet-1k. It was introduced in the paper Designing Network Design Spaces and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file"}}, "required": ["image_path"]}}, {"name": "microsoft_table_transformer_detection", "description": "Table Transformer (DETR) model trained on PubTables1M for detecting tables in documents. Introduced in the paper PubTables-1M: Towards Comprehensive Table Extraction From Unstructured Documents by Smock et al.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path to the image for table detection."}}, "required": ["image_path"]}}, {"name": "facebook_detr_resnet_50", "description": "DEtection TRansformer (DETR) model trained end-to-end on COCO 2017 object detection (118k annotated images). It was introduced in the paper End-to-End Object Detection with Transformers by Carion et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image file to be processed by the Facebook DETR ResNet-50 model."}}, "required": ["image_path"]}}, {"name": "hustvl_yolos_tiny", "description": "YOLOS is a Vision Transformer (ViT) trained using the DETR loss. Despite its simplicity, a base-sized YOLOS model is able to achieve 42 AP on COCO validation 2017 (similar to DETR and more complex frameworks such as Faster R-CNN). The model is trained using a bipartite matching loss: one compares the predicted classes + bounding boxes of each of the N = 100 object queries to the ground truth annotations, padded up to the same length N (so if an image only contains 4 objects, 96 annotations will just have a no object as class and no bounding box as bounding box). The Hungarian matching algorithm is used to create an optimal one-to-one mapping between each of the N queries and each of the N annotations. Next, standard cross-entropy (for the classes) and a linear combination of the L1 and generalized IoU loss (for the bounding boxes) are used to optimize the parameters of the model.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image to be processed by the YOLOS model."}}, "required": ["image_path"]}}, {"name": "facebook_detr_resnet_101", "description": "DEtection TRansformer (DETR) model trained end-to-end on COCO 2017 object detection (118k annotated images). It was introduced in the paper End-to-End Object Detection with Transformers by Carion et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image to be processed by the DETR model"}}, "required": ["image_path"]}}, {"name": "google_owlvit_base_patch32", "description": "OWL-ViT is a zero-shot text-conditioned object detection model that uses CLIP as its multi-modal backbone, with a ViT-like Transformer to get visual features and a causal language model to get the text features. The model can be used to query an image with one or multiple text queries.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path to the image that needs to be queried."}, "prompt": {"type": "string", "description": "The text query or prompt to query an image"}}, "required": ["image_path", "prompt"]}}, {"name": "keremberke_yolov8m_table_extraction", "description": "A YOLOv8 model for table extraction in images, capable of detecting both bordered and borderless tables. Trained using the keremberke/table-extraction dataset.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file to be processed"}, "output_path": {"type": "string", "description": "The file path to save the extracted tables."}}, "required": ["image_path", "output_path"]}}, {"name": "detr_doc_table_detection", "description": "detr-doc-table-detection is a model trained to detect both Bordered and Borderless tables in documents, based on facebook/detr-resnet-50.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path or URL of the image to be processed"}}, "required": ["image_path"]}}, {"name": "hustvl_yolos_small", "description": "YOLOS model fine-tuned on COCO 2017 object detection (118k annotated images). It was introduced in the paper You Only Look at One Sequence: Rethinking Transformer in Vision through Object Detection by Fang et al. and first released in this repository. YOLOS is a Vision Transformer (ViT) trained using the DETR loss. Despite its simplicity, a base-sized YOLOS model is able to achieve 42 AP on COCO validation 2017 (similar to DETR and more complex frameworks such as Faster R-CNN).", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image to be processed"}}, "required": ["image_path"]}}, {"name": "facebook_detr_resnet_101_dc5", "description": "DETR (End-to-End Object Detection) model with ResNet-101 backbone (dilated C5 stage). The model is trained on COCO 2017 object detection dataset and achieves an average precision (AP) of 44.9 on the COCO 2017 validation set.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that will be passed to the DETR (End-to-End Object Detection) model."}}, "required": ["image_path"]}}, {"name": "deformable_detr", "description": "Deformable DETR model with ResNet-50 backbone trained end-to-end on COCO 2017 object detection (118k annotated images). It was introduced in the paper Deformable DETR: Deformable Transformers for End-to-End Object Detection by Zhu et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file to be used as input for object detection"}}, "required": ["image_path"]}}, {"name": "keremberke_yolov8m_hard_hat_detection", "description": "A YOLOv8 model for detecting hard hats in images. The model can distinguish between 'Hardhat' and 'NO-Hardhat' classes. It can be used to ensure safety compliance in construction sites or other industrial environments where hard hats are required.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the input image"}, "output_path": {"type": "string", "description": "Specifies the output path where the detected images or results will be saved."}, "conf": {"type": "string", "description": "The configuration file or string"}, "iou": {"type": "number", "description": "The intersection over union (IOU) threshold for non-maximum suppression. It determines the overlap required for two bounding boxes to be considered as the same object."}, "agnostic_nms": {"type": "boolean", "description": "Boolean flag indicating whether to use agnostic NMS or not in the YOLOv8 model for detecting hard hats in images."}, "max_det": {"type": "integer", "description": "The maximum number of detections to return."}}, "required": ["image_path", "output_path"]}}, {"name": "keremberke_yolov5m_license_plate", "description": "A YOLOv5 model for license plate detection trained on a custom dataset. The model can detect license plates in images with high accuracy.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the image to be processed"}, "output_path": {"type": "string", "description": "The path to save the detected license plates"}, "size": {"type": "integer", "description": "The size of the input images in pixels"}, "augment": {"type": "boolean", "description": "Flag indicating whether or not to apply augmentation during license plate detection."}, "conf": {"type": "string", "description": "The configuration for the YOLOv5m license plate detection model"}, "iou": {"type": "string", "description": "The IoU (Intersection over Union) threshold used for non-maximum suppression during license plate detection."}, "agnostic": {"type": "string", "description": "This argument determines whether the model should be agnostic to any specific license plate type or design."}, "max_det": {"type": "integer", "description": "The maximum number of license plates to detect in an image"}}, "required": ["image_path", "output_path"]}}, {"name": "keremberke_yolov8m_valorant_detection", "description": "A YOLOv8 model for object detection in Valorant game, trained on a custom dataset. It detects dropped spike, enemy, planted spike, and teammate objects.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file to perform object detection on in the Valorant game"}, "output_path": {"type": "string", "description": "The file path where the detection results will be saved"}}, "required": ["image_path", "output_path"]}}, {"name": "keremberke_yolov8m_csgo_player_detection", "description": "An object detection model trained to detect Counter-Strike: Global Offensive (CS:GO) players. The model is based on the YOLOv8 architecture and can identify 'ct', 'cthead', 't', and 'thead' labels.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path to the image that needs to be processed for player detection."}, "output_path": {"type": "string", "description": "The path to the output file where the detection results will be saved."}}, "required": ["image_path", "output_path"]}}, {"name": "keremberke_yolov8s_table_extraction", "description": "A YOLOv8 model for table extraction in documents, capable of detecting bordered and borderless tables. Trained on the table-extraction dataset, the model achieves a mAP@0.5 of 0.984 on the validation set.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that contains the table to be extracted."}, "output_path": {"type": "string", "description": "The path to the output directory where the extracted tables will be saved."}}, "required": ["image_path", "output_path"]}}, {"name": "google_owlvit_large_patch14", "description": "OWL-ViT is a zero-shot text-conditioned object detection model that can be used to query an image with one or multiple text queries. It uses CLIP as its multi-modal backbone, with a ViT-like Transformer to get visual features and a causal language model to get the text features. OWL-ViT is trained on publicly available image-caption data and fine-tuned on publicly available object detection datasets such as COCO and OpenImages.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the image to be used for object detection"}, "prompt": {"type": "string", "description": "The text prompt for the object detection query"}}, "required": ["image_path", "prompt"]}}, {"name": "keremberke_yolov8m_nlf_head_detection", "description": "A YOLOv8 model trained for head detection in American football. The model is capable of detecting helmets, blurred helmets, difficult helmets, partial helmets, and sideline helmets.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file to be processed by the YOLOv8 model for head detection."}, "conf": {"type": "string", "description": "The configuration for the YOLOv8 model"}, "iou": {"type": "number", "description": "The Intersection over Union (IoU) threshold used for object detection confidence"}, "agnostic_nms": {"type": "boolean", "description": "Indicates whether to apply agnostic NMS during head detection."}, "max_det": {"type": "integer", "description": "The maximum number of detections to be made by the model"}}, "required": ["image_path"]}}, {"name": "keremberke_yolov8m_forklift_detection", "description": "A YOLOv8 model for detecting forklifts and persons in images.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that needs to be processed"}, "conf": {"type": "string", "description": "The configuration file for the YOLOv8 model"}, "iou": {"type": "number", "description": "The Intersection over Union (IoU) threshold for object detection"}, "agnostic_nms": {"type": "boolean", "description": "A boolean flag indicating whether to use agnostic NMS or not for post-processing"}, "max_det": {"type": "integer", "description": "The maximum number of detections to return"}}, "required": ["image_path"]}}, {"name": "google_owlvit_base_patch16", "description": "OWL-ViT is a zero-shot text-conditioned object detection model that can be used to query an image with one or multiple text queries. OWL-ViT uses CLIP as its multi-modal backbone, with a ViT-like Transformer to get visual features and a causal language model to get the text features.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the input image"}, "prompt": {"type": "string", "description": "The text query or prompt to query the image with"}}, "required": ["image_path", "prompt"]}}, {"name": "keremberke_yolov8m_plane_detection", "description": "A YOLOv8 model for plane detection trained on the keremberke/plane-detection dataset. The model is capable of detecting planes in images with high accuracy.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path to the image that needs plane detection"}, "output_path": {"type": "string", "description": "The output path where the resulting plane detection images will be saved."}, "conf": {"type": "string", "description": "The configuration for the YOLOv8m plane detection model"}, "iou": {"type": "number", "description": "The Intersection over Union (IoU) threshold for plane detection. This parameter controls the minimum overlap between the predicted bounding box and the ground truth bounding box required for a detection to be considered as valid."}, "agnostic_nms": {"type": "boolean", "description": "A boolean flag indicating whether to use agnostic NMS or not. If set to True, agnostic NMS will be used, otherwise, the default NMS will be used."}, "max_det": {"type": "integer", "description": "The maximum number of detections to be outputted by the model"}}, "required": ["image_path", "output_path"]}}, {"name": "keremberke_yolov8s_csgo_player_detection", "description": "A YOLOv8 model for detecting Counter-Strike: Global Offensive (CS:GO) players. Supports the labels ['ct', 'cthead', 't', 'thead'].", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image to be processed"}, "output_path": {"type": "string", "description": "The path where the detection output will be saved"}}, "required": ["image_path", "output_path"]}}, {"name": "keremberke_yolov8m_blood_cell_detection", "description": "A YOLOv8 model for blood cell detection, including Platelets, RBC, and WBC. Trained on the blood-cell-object-detection dataset.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that needs to be processed for blood cell detection"}, "output_path": {"type": "string", "description": "The path to the output directory where the blood cell detection results will be saved"}, "conf": {"type": "string", "description": "The configuration for the YOLOv8 model"}, "iou": {"type": "number", "description": "The intersection over union (IOU) threshold for bounding box detection. It determines the minimum overlap required between a predicted bounding box and a ground truth bounding box to be considered a correct detection."}, "agnostic_nms": {"type": "string", "description": "A flag indicating whether to use agnostic NMS (Non-Maximum Suppression), which is a technique used in object detection algorithms that helps eliminate duplicate object detections. Setting this flag to 'True' will use agnostic NMS and 'False' will not use agnostic NMS."}, "max_det": {"type": "integer", "description": "The maximum number of detections to return"}}, "required": ["image_path", "output_path"]}}, {"name": "keremberke_yolov8s_hard_hat_detection", "description": "An object detection model trained to detect hard hats and no-hard hats in images. The model is based on YOLOv8 architecture and can be used for safety applications.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the image to be processed for hard hat detection."}, "output_path": {"type": "string", "description": "The path to save the output or prediction results."}}, "required": ["image_path", "output_path"]}}, {"name": "fcakyon_yolov5s_v7_0", "description": "Yolov5s-v7.0 is an object detection model trained on the COCO dataset. It can detect objects in images and return their bounding boxes, scores, and categories.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file"}, "output_path": {"type": "string", "description": "The file path or directory path where the output should be saved"}, "conf": {"type": "string", "description": "A configuration file or object"}, "iou": {"type": "number", "description": "The intersection over union threshold for non-maximum suppression"}, "agnostic": {"type": "boolean", "description": "Flag indicating whether to use agnostic or not"}, "multi_label": {"type": "string", "description": "A string containing the description of the argument"}}, "required": ["image_path", "output_path"]}}, {"name": "keremberke_yolov8n_table_extraction", "description": "An object detection model for extracting tables from documents. Supports two label types: 'bordered' and 'borderless'.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file to be processed"}, "output_path": {"type": "string", "description": "The path to save the extracted tables"}, "conf": {"type": "string", "description": "The configuration for the object detection model"}, "iou": {"type": "number", "description": "The intersection over union (IoU) threshold for object detection"}, "agnostic_nms": {"type": "boolean", "description": "A boolean value indicating whether or not to use agnostic NMS during table extraction."}, "max_det": {"type": "integer", "description": "The maximum number of detections"}}, "required": ["image_path", "output_path"]}}, {"name": "clipseg_rd64_refined", "description": "CLIPSeg model with reduce dimension 64, refined (using a more complex convolution). It was introduced in the paper Image Segmentation Using Text and Image Prompts by Lddecke et al. and first released in this repository. This model is intended for zero-shot and one-shot image segmentation.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file for segmentation"}, "prompt": {"type": "string", "description": "The description of the argument"}}, "required": ["labels", "image_path"]}}, {"name": "keremberke_yolov8n_csgo_player_detection", "description": "A YOLOv8 model for detecting Counter-Strike: Global Offensive (CS:GO) players with supported labels: ['ct', 'cthead', 't', 'thead'].", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path or URL of the image to perform CS:GO player detection on."}, "output_path": {"type": "string", "description": "The output path where the detection results will be saved."}, "conf": {"type": "string", "description": "The configuration for the YOLOv8n CS:GO player detection model"}, "iou": {"type": "number", "description": "The intersection over union (IOU) threshold for bounding box overlap calculation."}, "agnostic_nms": {"type": "boolean", "description": "A boolean flag indicating whether to use agnostic non-maximum suppression during the CS:GO player detection."}, "max_det": {"type": "integer", "description": "The maximum number of detections to return"}}, "required": ["image_path", "output_path"]}}, {"name": "keremberke_yolov5s_license_plate", "description": "A YOLOv5 based license plate detection model trained on a custom dataset.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image file to be processed by the YOLOv5 license plate detection model."}, "output_path": {"type": "string", "description": "The file path where the output will be saved."}, "size": {"type": "integer", "description": "The size of the input image for license plate detection"}, "augment": {"type": "boolean", "description": "A flag indicating if data augmentation should be applied during detection"}, "conf": {"type": "string", "description": "The description of the configuration argument"}, "iou": {"type": "number", "description": "The IOU threshold for object detection"}, "agnostic": {"type": "string", "description": "Whether to use agnostic labels or not. If set to True, the model will predict only the class and not the corresponding license plate number."}, "max_det": {"type": "integer", "description": "The maximum number of detections to output"}}, "required": ["image_path", "output_path"]}}, {"name": "openmmlab_upernet_convnext_small", "description": "UperNet framework for semantic segmentation, leveraging a ConvNeXt backbone. UperNet was introduced in the paper Unified Perceptual Parsing for Scene Understanding by Xiao et al. Combining UperNet with a ConvNeXt backbone was introduced in the paper A ConvNet for the 2020s.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the input image"}}, "required": ["image_path"]}}, {"name": "keremberke_yolov8n_blood_cell_detection", "description": "This model detects blood cells in images, specifically Platelets, RBC, and WBC. It is based on the YOLOv8 architecture and trained on the blood-cell-object-detection dataset.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the image to be analyzed"}, "output_path": {"type": "string", "description": "The path for saving the detection results"}, "conf": {"type": "string", "description": "The configuration file path for the YOLOv8n blood cell detection model"}, "iou": {"type": "number", "description": "The Intersection over Union threshold for object detection. It is used to determine the overlap between the predicted bounding box and the ground truth bounding box."}, "agnostic_nms": {"type": "boolean", "description": "Whether or not to use agnostic NMS during the blood cell detection process."}, "max_det": {"type": "integer", "description": "The maximum number of detections to be returned."}}, "required": ["image_path", "output_path"]}}, {"name": "nvidia_segformer_b0_finetuned_ade_512_512", "description": "SegFormer model fine-tuned on ADE20k at resolution 512x512. It was introduced in the paper SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers by Xie et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the input image file."}}, "required": ["image_path"]}}, {"name": "nvidia_segformer_b5_finetuned_ade_640_640", "description": "SegFormer model fine-tuned on ADE20k at resolution 640x640. It was introduced in the paper SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers by Xie et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the input image to be processed."}}, "required": ["image_path"]}}, {"name": "nvidia_segformer_b2_finetuned_cityscapes_1024_1024", "description": "SegFormer model fine-tuned on CityScapes at resolution 1024x1024. It was introduced in the paper SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers by Xie et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}}, "required": ["image_path"]}}, {"name": "nvidia_segformer_b0_finetuned_cityscapes_1024_1024", "description": "SegFormer model fine-tuned on CityScapes at resolution 1024x1024. It was introduced in the paper SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers by Xie et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that needs to be segmented"}}, "required": ["image_path"]}}, {"name": "facebook_detr_resnet_50_panoptic", "description": "DEtection TRansformer (DETR) model trained end-to-end on COCO 2017 panoptic (118k annotated images). It was introduced in the paper End-to-End Object Detection with Transformers by Carion et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file for which object detection is to be performed."}}, "required": ["image_path"]}}, {"name": "facebook_maskformer_swin_base_coco", "description": "MaskFormer model trained on COCO panoptic segmentation (base-sized version, Swin backbone). It was introduced in the paper Per-Pixel Classification is Not All You Need for Semantic Segmentation and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}}, "required": ["image_path"]}}, {"name": "mattmdjaga_segformer_b2_clothes", "description": "SegFormer model fine-tuned on ATR dataset for clothes segmentation.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the image to be processed."}}, "required": ["image_path"]}}, {"name": "facebook_mask2former_swin_base_coco_panoptic", "description": "Mask2Former model trained on COCO panoptic segmentation (base-sized version, Swin backbone). It was introduced in the paper Masked-attention Mask Transformer for Universal Image Segmentation and first released in this repository. Mask2Former addresses instance, semantic and panoptic segmentation with the same paradigm: by predicting a set of masks and corresponding labels. Hence, all 3 tasks are treated as if they were instance segmentation. Mask2Former outperforms the previous SOTA, MaskFormer both in terms of performance an efficiency.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file to be processed by the Mask2Former model."}}, "required": ["image_path"]}}, {"name": "facebook_mask2former_swin_large_cityscapes_semantic", "description": "Mask2Former model trained on Cityscapes semantic segmentation (large-sized version, Swin backbone). It addresses instance, semantic and panoptic segmentation by predicting a set of masks and corresponding labels. The model outperforms the previous SOTA, MaskFormer, in terms of performance and efficiency.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path or URL of the input image."}}, "required": ["image_path"]}}, {"name": "facebook_maskformer_swin_large_ade", "description": "MaskFormer model trained on ADE20k semantic segmentation (large-sized version, Swin backbone). It was introduced in the paper Per-Pixel Classification is Not All You Need for Semantic Segmentation and first released in this repository. This model addresses instance, semantic and panoptic segmentation with the same paradigm: by predicting a set of masks and corresponding labels. Hence, all 3 tasks are treated as if they were instance segmentation.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image file"}}, "required": ["image_path"]}}, {"name": "shi_labs_oneformer_ade20k_swin_large", "description": "OneFormer model trained on the ADE20k dataset (large-sized version, Swin backbone). It was introduced in the paper OneFormer: One Transformer to Rule Universal Image Segmentation by Jain et al. and first released in this repository. OneFormer is the first multi-task universal image segmentation framework. It needs to be trained only once with a single universal architecture, a single model, and on a single dataset, to outperform existing specialized models across semantic, instance, and panoptic segmentation tasks. OneFormer uses a task token to condition the model on the task in focus, making the architecture task-guided for training, and task-dynamic for inference, all with a single model.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}}, "required": ["image_path"]}}, {"name": "facebook_mask2former_swin_large_coco_panoptic", "description": "Mask2Former model trained on COCO panoptic segmentation (large-sized version, Swin backbone). It was introduced in the paper Masked-attention Mask Transformer for Universal Image Segmentation and first released in this repository. Mask2Former addresses instance, semantic and panoptic segmentation with the same paradigm: by predicting a set of masks and corresponding labels. Hence, all 3 tasks are treated as if they were instance segmentation. Mask2Former outperforms the previous SOTA, MaskFormer both in terms of performance an efficiency.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the input image file."}}, "required": ["image_path"]}}, {"name": "facebook_mask2former_swin_small_coco_instance", "description": "Mask2Former model trained on COCO instance segmentation (small-sized version, Swin backbone). It was introduced in the paper Masked-attention Mask Transformer for Universal Image Segmentation and first released in this repository. Mask2Former addresses instance, semantic and panoptic segmentation with the same paradigm: by predicting a set of masks and corresponding labels. Hence, all 3 tasks are treated as if they were instance segmentation. Mask2Former outperforms the previous SOTA, MaskFormer both in terms of performance an efficiency.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the input image"}}, "required": ["image_path"]}}, {"name": "shi_labs_oneformer_ade20k_swin_tiny", "description": "OneFormer is the first multi-task universal image segmentation framework. It needs to be trained only once with a single universal architecture, a single model, and on a single dataset, to outperform existing specialized models across semantic, instance, and panoptic segmentation tasks. OneFormer uses a task token to condition the model on the task in focus, making the architecture task-guided for training, and task-dynamic for inference, all with a single model.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the image to be processed"}, "semantic": {"type": "string", "description": "The task in focus for image segmentation"}, "instance": {"type": "string", "description": "The description of the argument"}, "panoptic": {"type": "string", "description": "The panoptic segmentation map of an image"}}, "required": ["image_path"]}}, {"name": "keremberke_yolov8m_building_segmentation", "description": "A YOLOv8 model for building segmentation in satellite images. It can detect and segment buildings in the input images.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the input image that needs to be segmented for building detection and segmentation."}}, "required": ["image_path"]}}, {"name": "nvidia_segformer_b5_finetuned_cityscapes_1024_1024", "description": "SegFormer model fine-tuned on CityScapes at resolution 1024x1024. It was introduced in the paper SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers by Xie et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path or URL to the input image that needs to be segmented."}}, "required": ["image_path"]}}, {"name": "facebook_mask2former_swin_tiny_coco_instance", "description": "Mask2Former model trained on COCO instance segmentation (tiny-sized version, Swin backbone). It was introduced in the paper Masked-attention Mask Transformer for Universal Image Segmentation and first released in this repository. This model addresses instance, semantic and panoptic segmentation with the same paradigm: by predicting a set of masks and corresponding labels. You can use this particular checkpoint for instance segmentation.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file for which instance segmentation needs to be performed."}}, "required": ["image_path"]}}, {"name": "facebook_maskformer_swin_base_ade", "description": "MaskFormer model trained on ADE20k semantic segmentation (base-sized version, Swin backbone). It was introduced in the paper Per-Pixel Classification is Not All You Need for Semantic Segmentation and first released in this repository. This model addresses instance, semantic and panoptic segmentation with the same paradigm: by predicting a set of masks and corresponding labels. Hence, all 3 tasks are treated as if they were instance segmentation.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}}, "required": ["image_path"]}}, {"name": "keremberke_yolov8m_pcb_defect_segmentation", "description": "A YOLOv8 model for PCB defect segmentation trained on the pcb-defect-segmentation dataset. The model can detect and segment defects in PCB images, such as Dry_joint, Incorrect_installation, PCB_damage, and Short_circuit.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the PCB image for defect segmentation"}}, "required": ["image_path"]}}, {"name": "facebook_maskformer_swin_tiny_coco", "description": "MaskFormer model trained on COCO panoptic segmentation (tiny-sized version, Swin backbone). It was introduced in the paper Per-Pixel Classification is Not All You Need for Semantic Segmentation and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file to be processed."}}, "required": ["image_path"]}}, {"name": "yolov8m_pothole_segmentation", "description": "A YOLOv8 model for pothole segmentation trained on keremberke/pothole-segmentation dataset. It can detect potholes in images and provide segmentation masks for the detected potholes.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file for pothole segmentation"}}, "required": ["image_path"]}}, {"name": "keremberke_yolov8s_building_segmentation", "description": "A YOLOv8 model for building segmentation in satellite images. Trained on the satellite-building-segmentation dataset, it can detect and segment buildings with high accuracy.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the satellite image that the model will perform building segmentation on."}}, "required": ["image_path"]}}, {"name": "yolov8s_pothole_segmentation", "description": "A YOLOv8 model for pothole segmentation. This model detects potholes in images and outputs bounding boxes and masks for the detected potholes.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path to the image to be processed"}}, "required": ["image_path"]}}, {"name": "yolov8n_pothole_segmentation", "description": "A YOLOv8 model for pothole segmentation in images. The model is trained on the pothole-segmentation dataset and achieves high accuracy in detecting potholes.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the image to be processed by the YOLOv8 model"}}, "required": ["image_path"]}}, {"name": "keremberke_yolov8n_pcb_defect_segmentation", "description": "A YOLOv8 model for detecting and segmenting PCB defects such as Dry_joint, Incorrect_installation, PCB_damage, and Short_circuit.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the input image for PCB defect segmentation."}}, "required": ["image_path"]}}, {"name": "lambdalabs_sd_image_variations_diffusers", "description": "This version of Stable Diffusion has been fine tuned from CompVis/stable-diffusion-v1-4-original to accept CLIP image embedding rather than text embeddings. This allows the creation of image variations similar to DALLE-2 using Stable Diffusion.", "parameters": {"type": "object", "properties": {"original_image_path": {"type": "string", "description": "The path to the original image file"}, "output_path": {"type": "string", "description": "The path to the directory where the output variations will be saved."}, "guidance_scale": {"type": "string", "description": "The scale of diffusion guidance for image variations"}}, "required": ["original_image_path", "output_path"]}}, {"name": "lllyasviel_sd_controlnet_openpose", "description": "ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Human Pose Estimation. It can be used in combination with Stable Diffusion.", "parameters": {"type": "object", "properties": {"control_image_path": {"type": "string", "description": "The path to the control image"}, "prompt": {"type": "string", "description": "The description of the argument"}, "output_image_path": {"type": "string", "description": "The path to the output image file"}}, "required": ["control_image_path", "prompt", "output_image_path"]}}, {"name": "lllyasviel_sd_controlnet_hed", "description": "ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on HED Boundary. It can be used in combination with Stable Diffusion.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the image to be processed."}, "prompt": {"type": "string", "description": "The description of the argument"}, "output_path": {"type": "string", "description": "The path where the output will be saved"}}, "required": ["image_path", "prompt", "output_path"]}}, {"name": "lllyasviel_sd_controlnet_seg", "description": "ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Image Segmentation. It can be used in combination with Stable Diffusion.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image to be used for image segmentation"}, "prompt": {"type": "string", "description": "The description of the argument"}, "output_path": {"type": "string", "description": "The path to the output file or directory"}}, "required": ["image_path", "prompt", "output_path"]}}, {"name": "lllyasviel_sd_controlnet_depth", "description": "ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Depth estimation. It can be used in combination with Stable Diffusion.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path to the image"}, "prompt": {"type": "string", "description": "The description of the argument"}, "output_path": {"type": "string", "description": "The path to the output directory where the results will be saved"}}, "required": ["image_path", "prompt", "output_path"]}}, {"name": "lllyasviel_sd_controlnet_scribble", "description": "ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Scribble images. It can be used in combination with Stable Diffusion.", "parameters": {"type": "object", "properties": {"control_image_path": {"type": "string", "description": "The path to the control image used as a condition for the ControlNet"}, "prompt": {"type": "string", "description": "The description of the argument"}, "output_image_path": {"type": "string", "description": "The path to the output image file where the result will be saved."}}, "required": ["control_image_path", "prompt", "output_image_path"]}}, {"name": "lllyasviel_control_v11p_sd15_canny", "description": "Controlnet v1.1 is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Canny edges. It can be used in combination with Stable Diffusion, such as runwayml/stable-diffusion-v1-5.", "parameters": {"type": "object", "properties": {"control_image_path": {"type": "string", "description": "The path to the image used as input for the ControlNet model."}, "prompt": {"type": "string", "description": "The prompt for the neural network to generate control conditions based on Canny edges"}, "output_image_path": {"type": "string", "description": "The path to the output image file"}, "high_threshold": {"type": "number", "description": "The high threshold for the Canny edge detection algorithm"}}, "required": ["control_image_path", "prompt", "output_image_path", "high_threshold"]}}, {"name": "lllyasviel_control_v11p_sd15_lineart", "description": "ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on lineart images.", "parameters": {"type": "object", "properties": {"control_image_path": {"type": "string", "description": "The path to the control image file."}, "prompt": {"type": "string", "description": "The description of the argument"}, "output_image_path": {"type": "string", "description": "The path to the output image file"}}, "required": ["control_image_path", "prompt", "output_image_path"]}}, {"name": "lllyasviel_sd_controlnet_normal", "description": "ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Normal Map Estimation. It can be used in combination with Stable Diffusion.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path or URL to the input image"}, "prompt": {"type": "string", "description": "The description of the argument"}, "output_path": {"type": "string", "description": "The path to the output directory where the results will be saved."}}, "required": ["image_path", "prompt", "output_path"]}}, {"name": "llllyasviel_control_v11p_sd15_scribble", "description": "Controlnet v1.1 is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Scribble images. It can be used in combination with Stable Diffusion, such as runwayml/stable-diffusion-v1-5.", "parameters": {"type": "object", "properties": {"control_image_path": {"type": "string", "description": "The path to the control image for the ControlNet conditioned on Scribble images."}, "prompt": {"type": "string", "description": "The description of the argument"}, "output_image_path": {"type": "string", "description": "The output path for the generated image"}}, "required": ["control_image_path", "prompt", "output_image_path"]}}, {"name": "lllyasviel_control_v11p_sd15_openpose", "description": "ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on openpose images.", "parameters": {"type": "object", "properties": {"control_image_path": {"type": "string", "description": "The file path to the control image"}, "prompt": {"type": "string", "description": "The description of the argument"}, "output_image_path": {"type": "string", "description": "The path to the output image file"}}, "required": ["control_image_path", "prompt", "output_image_path"]}}, {"name": "lllyasviel_control_v11e_sd15_ip2p", "description": "ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on instruct pix2pix images.", "parameters": {"type": "object", "properties": {"control_image_path": {"type": "string", "description": "Path to the control image for the ControlNet"}, "prompt": {"type": "string", "description": "The description of the argument"}, "output_image_path": {"type": "string", "description": "The path to the output image file"}}, "required": ["control_image_path", "prompt", "output_image_path"]}}, {"name": "lllyasviel_control_v11p_sd15_softedge", "description": "Controlnet v1.1 is a diffusion-based text-to-image generation model that controls pretrained large diffusion models to support additional input conditions. This checkpoint corresponds to the ControlNet conditioned on Soft edges. It can be used in combination with Stable Diffusion, such as runwayml/stable-diffusion-v1-5.", "parameters": {"type": "object", "properties": {"control_image_path": {"type": "string", "description": "The path to the control image used for conditioning the text-to-image generation model."}, "prompt": {"type": "string", "description": "The prompt for generating text-to-image results with ControlNet v1.1 conditioned on Soft edges."}, "output_image_path": {"type": "string", "description": "The path to save the generated output image"}}, "required": ["control_image_path", "prompt", "output_image_path"]}}, {"name": "swin2SR_lightweight_x2_64", "description": "Swin2SR model that upscales images x2. It was introduced in the paper Swin2SR: SwinV2 Transformer for Compressed Image Super-Resolution and Restoration by Conde et al. and first released in this repository. This model is intended for lightweight image super resolution.", "parameters": {"type": "object", "properties": {"input_image": {"type": "string", "description": "The input image for super-resolution upscaling."}, "output_path": {"type": "string", "description": "The path to save the output image"}}, "required": ["input_image", "output_path"]}}, {"name": "lllyasviel_control_v11p_sd15_mlsd", "description": "Controlnet v1.1 is a neural network structure to control diffusion models by adding extra conditions. It can be used in combination with Stable Diffusion, such as runwayml/stable-diffusion-v1-5. This checkpoint corresponds to the ControlNet conditioned on MLSD images.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the image"}, "prompt": {"type": "string", "description": "The description of the argument"}, "output_path": {"type": "string", "description": "The path to the output location where the results will be stored."}}, "required": ["image_path", "prompt", "output_path"]}}, {"name": "lllyasviel_control_v11p_sd15_normalbae", "description": "ControlNet v1.1 is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on normalbae images. It can be used in combination with Stable Diffusion, such as runwayml/stable-diffusion-v1-5.", "parameters": {"type": "object", "properties": {"control_image_path": {"type": "string", "description": "The path to the control image that will be used for conditioning the ControlNet v1.1"}, "prompt": {"type": "string", "description": "The description of the argument"}, "output_image_path": {"type": "string", "description": "The file path to save the output image"}}, "required": ["control_image_path", "prompt", "output_image_path"]}}, {"name": "GreeneryScenery_SheepsControlV3", "description": "GreeneryScenery/SheepsControlV3 is a model for image-to-image tasks. It can be used to generate images based on the input image and optional text guidance. The model has some limitations, such as the conditioning image not affecting the output image much. Improvements can be made by training for more epochs, using better prompts, and preprocessing the data.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the input image file."}, "text_guidance": {"type": "string", "description": "The optional text guidance for generating images based on the input image"}}, "required": ["image_path", "text_guidance"]}}, {"name": "GreeneryScenery_SheepsControlV5", "description": "SheepsControlV5 is an image-to-image model trained on the poloclub/diffusiondb dataset. It is designed for transforming input images into a different style or representation.", "parameters": {"type": "object", "properties": {"input_text": {"type": "string", "description": "The input text to be processed by the SheepsControlV5 model"}, "model_name": {"type": "string", "description": "The name of the model to be used for image transformation"}, "tokenizer_name": {"type": "string", "description": "The name of the tokenizer to be used in the GreeneryScenery_SheepsControlV5 function."}}, "required": ["input_text", "model_name", "tokenizer_name"]}}, {"name": "google_maxim_s3_deblurring_gopro", "description": "MAXIM model pre-trained for image deblurring. It was introduced in the paper MAXIM: Multi-Axis MLP for Image Processing by Zhengzhong Tu, Hossein Talebi, Han Zhang, Feng Yang, Peyman Milanfar, Alan Bovik, Yinxiao Li and first released in this repository.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that needs to be deblurred."}}, "required": ["image_path"]}}, {"name": "lllyasviel_control_v11p_sd15s2_lineart_anime", "description": "ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on lineart_anime images.", "parameters": {"type": "object", "properties": {"control_image_path": {"type": "string", "description": "The file path of the control image."}, "prompt": {"type": "string", "description": "The description of the argument"}, "output_path": {"type": "string", "description": "The description of the argument"}}, "required": ["control_image_path", "prompt", "output_path"]}}, {"name": "lllyasviel_control_v11p_sd15_inpaint", "description": "ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on inpaint images.", "parameters": {"type": "object", "properties": {"original_image_path": {"type": "string", "description": "The path of the original image to be inpainted"}, "mask_image_path": {"type": "string", "description": "The path to the mask image"}, "prompt": {"type": "string", "description": "The description of the argument"}, "output_path": {"type": "string", "description": "The path to the output directory where the result files will be saved."}}, "required": ["original_image_path", "mask_image_path", "prompt", "output_path"]}}, {"name": "google_ddpm_celebahq_256", "description": "Denoising Diffusion Probabilistic Models (DDPM) for high quality image synthesis. Trained on the unconditional CIFAR10 dataset and 256x256 LSUN, obtaining state-of-the-art FID score of 3.17 and Inception score of 9.46.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path to the output directory where the generated images will be saved."}}, "required": ["api_key", "output_path"]}}, {"name": "google_ddpm_ema_celebahq_256", "description": "High quality image synthesis using diffusion probabilistic models, a class of latent variable models inspired by considerations from nonequilibrium thermodynamics.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path where the output images will be saved"}}, "required": ["output_path"]}}, {"name": "google_ddpm_ema_church_256", "description": "Denoising Diffusion Probabilistic Models (DDPM) is a class of latent variable models inspired by nonequilibrium thermodynamics. It is used for high-quality image synthesis. DDPM models can use discrete noise schedulers such as scheduling_ddpm, scheduling_ddim, and scheduling_pndm for inference. The model can be used with different pipelines for faster inference and better trade-off between quality and speed.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path where the output will be saved"}}, "required": ["output_path"]}}, {"name": "CompVis_ldm_celebahq_256", "description": "Latent Diffusion Models (LDMs) achieve state-of-the-art synthesis results on image data and beyond by decomposing the image formation process into a sequential application of denoising autoencoders. LDMs enable high-resolution synthesis, semantic scene synthesis, super-resolution, and image inpainting while significantly reducing computational requirements compared to pixel-based DMs.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path where the synthesized image will be saved"}}, "required": ["output_path"]}}, {"name": "google_ddpm_church_256", "description": "Denoising Diffusion Probabilistic Models (DDPM) for high-quality image synthesis. Trained on the unconditional CIFAR10 dataset and 256x256 LSUN. Supports different noise schedulers like scheduling_ddpm, scheduling_ddim, and scheduling_pndm for inference.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path where the synthesized images will be saved."}}, "required": ["output_path"]}}, {"name": "google_ncsnpp_celebahq_256", "description": "Score-Based Generative Modeling through Stochastic Differential Equations (SDE) for unconditional image generation. This model achieves record-breaking performance on CIFAR-10 and demonstrates high fidelity generation of 1024 x 1024 images for the first time from a score-based generative model.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path to the output directory where the generated images will be saved."}}, "required": ["output_path"]}}, {"name": "johnowhitaker_sd_class_wikiart_from_bedrooms", "description": "This model is a diffusion model initialized from https://huggingface.co/google/ddpm-bedroom-256 and trained for 5000 steps on https://huggingface.co/datasets/huggan/wikiart.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path to the output file where the result will be saved."}}, "required": ["output_path"]}}, {"name": "ddpm_cifar10_32", "description": "Denoising Diffusion Probabilistic Models (DDPM) for high quality image synthesis. Trained on the unconditional CIFAR10 dataset. Supports various discrete noise schedulers such as scheduling_ddpm, scheduling_ddim, and scheduling_pndm.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path to the directory where the output will be saved."}}, "required": ["output_path"]}}, {"name": "google_ddpm_ema_bedroom_256", "description": "Denoising Diffusion Probabilistic Models (DDPM) is a class of latent variable models inspired by nonequilibrium thermodynamics, capable of producing high-quality image synthesis results. The model can use discrete noise schedulers such as scheduling_ddpm, scheduling_ddim, and scheduling_pndm for inference. It obtains an Inception score of 9.46 and a state-of-the-art FID score of 3.17 on the unconditional CIFAR10 dataset.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The output path where the images will be saved"}}, "required": ["output_path"]}}, {"name": "google_ncsnpp_ffhq_1024", "description": "Score-Based Generative Modeling through Stochastic Differential Equations (SDE) for unconditional image generation. Achieves record-breaking performance on CIFAR-10 and demonstrates high fidelity generation of 1024 x 1024 images for the first time from a score-based generative model.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path where the generated images will be saved"}}, "required": ["output_path"]}}, {"name": "ocariz_universe_1400", "description": "This model is a diffusion model for unconditional image generation of the universe trained for 1400 epochs.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path where the generated images will be saved"}}, "required": ["output_path"]}}, {"name": "minecraft_skin_diffusion_v2", "description": "An unconditional image generation model for generating Minecraft skin images using the diffusion model.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The output path where the generated Minecraft skin images will be saved."}}, "required": ["output_path"]}}, {"name": "minecraft_skin_diffusion", "description": "Unconditional Image Generation model for generating Minecraft skins using diffusion-based methods.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path where the generated Minecraft skin will be saved as an image file"}}, "required": ["output_path"]}}, {"name": "sd_class_butterflies_32", "description": "This model is a diffusion model for unconditional image generation of cute butterflies.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path where the generated butterfly images will be saved."}}, "required": ["output_path"]}}, {"name": "MFawad_sd_class_butterflies_32", "description": "This model is a diffusion model for unconditional image generation of cute.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The output path to save the generated images"}}, "required": ["output_path"]}}, {"name": "google_ncsnpp_ffhq_256", "description": "Score-Based Generative Modeling through Stochastic Differential Equations (SDE) for unconditional image generation. Achieves record-breaking performance on CIFAR-10 and demonstrates high fidelity generation of 1024 x 1024 images for the first time from a score-based generative model.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path where the output images will be saved."}}, "required": ["output_path"]}}, {"name": "google_ddpm_ema_cat_256", "description": "Denoising Diffusion Probabilistic Models (DDPM) is a class of latent variable models inspired by considerations from nonequilibrium thermodynamics. It can generate high-quality images, and supports different noise schedulers such as scheduling_ddpm, scheduling_ddim, and scheduling_pndm. On the unconditional CIFAR10 dataset, it achieves an Inception score of 9.46 and a state-of-the-art FID score of 3.17.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path to the output directory where the generated images will be saved"}}, "required": ["output_path"]}}, {"name": "ocariz_butterfly_200", "description": "This model is a diffusion model for unconditional image generation of cute butterflies trained for 200 epochs.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path to save the generated butterflies"}}, "required": ["output_path"]}}, {"name": "ntrant7_sd_class_butterflies_32", "description": "This model is a diffusion model for unconditional image generation of cute butterflies.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path where the generated images of cute butterflies will be saved."}}, "required": ["output_path"]}}, {"name": "apocalypse_19_shoe_generator", "description": "This model is a diffusion model for unconditional image generation of shoes trained on a custom dataset at 128x128 resolution.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path to the output directory where the generated images will be saved."}}, "required": ["output_path"]}}, {"name": "pravsels_ddpm_ffhq_vintage_finetuned_vintage_3epochs", "description": "Example Fine-Tuned Model for Unit 2 of the Diffusion Models Class", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path where the output will be saved."}}, "required": ["output_path"]}}, {"name": "microsoft_xclip_base_patch32", "description": "X-CLIP is a minimal extension of CLIP for general video-language understanding. The model is trained in a contrastive way on (video, text) pairs. This allows the model to be used for tasks like zero-shot, few-shot or fully supervised video classification and video-text retrieval.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The file path to the video that needs to be processed"}, "labels": {"type": "string", "description": "A list of labels for video classification and retrieval"}}, "required": ["video_path", "labels"]}}, {"name": "myunus1_diffmodels_galaxies_scratchbook", "description": "This model is a diffusion model for unconditional image generation of cute.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path to the directory where the generated images will be saved."}}, "required": ["output_path"]}}, {"name": "utyug1_sd_class_butterflies_32", "description": "This model is a diffusion model for unconditional image generation of cute butterflies.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path to the output directory where the generated images will be saved"}}, "required": ["output_path"]}}, {"name": "sd_class_pandas_32", "description": "This model is a diffusion model for unconditional image generation of cute.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The file path where the generated images will be saved."}}, "required": ["output_path"]}}, {"name": "facebook_timesformer_base_finetuned_k400", "description": "TimeSformer is a video classification model pre-trained on Kinetics-400. It was introduced in the paper TimeSformer: Is Space-Time Attention All You Need for Video Understanding? by Tong et al. and first released in this repository. The model can be used for video classification into one of the 400 possible Kinetics-400 labels.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file to be classified."}}, "required": ["video_path"]}}, {"name": "MCG_NJU_videomae_base", "description": "VideoMAE is an extension of Masked Autoencoders (MAE) to video. The architecture of the model is very similar to that of a standard Vision Transformer (ViT), with a decoder on top for predicting pixel values for masked patches.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file that will be used as input for the MCG_NJU_videomae_base function."}}, "required": ["video_path"]}}, {"name": "facebook_timesformer_base_finetuned_k600", "description": "TimeSformer model pre-trained on Kinetics-600. It was introduced in the paper TimeSformer: Is Space-Time Attention All You Need for Video Understanding? by Tong et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file."}}, "required": ["video_path"]}}, {"name": "MCG_NJU_videomae_base_finetuned_kinetics", "description": "VideoMAE model pre-trained for 1600 epochs in a self-supervised way and fine-tuned in a supervised way on Kinetics-400. It was introduced in the paper VideoMAE: Masked Autoencoders are Data-Efficient Learners for Self-Supervised Video Pre-Training by Tong et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file to be processed."}}, "required": ["video_path"]}}, {"name": "facebook_timesformer_hr_finetuned_k400", "description": "TimeSformer model pre-trained on Kinetics-400 for video classification into one of the 400 possible Kinetics-400 labels. Introduced in the paper TimeSformer: Is Space-Time Attention All You Need for Video Understanding? by Tong et al.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "Path to the video file for classification"}}, "required": ["video_path"]}}, {"name": "facebook_timesformer_base_finetuned_ssv2", "description": "TimeSformer model pre-trained on Something Something v2. It was introduced in the paper TimeSformer: Is Space-Time Attention All You Need for Video Understanding? by Tong et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file."}}, "required": ["video_path"]}}, {"name": "facebook_timesformer_hr_finetuned_ssv2", "description": "TimeSformer model pre-trained on Something Something v2. It was introduced in the paper TimeSformer: Is Space-Time Attention All You Need for Video Understanding? by Tong et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file."}}, "required": ["video_path"]}}, {"name": "videomae_large", "description": "VideoMAE is an extension of Masked Autoencoders (MAE) to video. The architecture of the model is very similar to that of a standard Vision Transformer (ViT), with a decoder on top for predicting pixel values for masked patches. Videos are presented to the model as a sequence of fixed-size patches (resolution 16x16), which are linearly embedded. One also adds a [CLS] token to the beginning of a sequence to use it for classification tasks. One also adds fixed sinus/cosinus position embeddings before feeding the sequence to the layers of the Transformer encoder. By pre-training the model, it learns an inner representation of videos that can then be used to extract features useful for downstream tasks.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file that will be processed by the VideoMAE model."}}, "required": ["video_path"]}}, {"name": "MCG_NJU_videomae_base_finetuned_ssv2", "description": "VideoMAE model pre-trained for 2400 epochs in a self-supervised way and fine-tuned in a supervised way on Something-Something-v2. It was introduced in the paper VideoMAE: Masked Autoencoders are Data-Efficient Learners for Self-Supervised Video Pre-Training by Tong et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file."}}, "required": ["video_path"]}}, {"name": "MCG_NJU_videomae_base_short", "description": "VideoMAE is an extension of Masked Autoencoders (MAE) to video. The architecture of the model is very similar to that of a standard Vision Transformer (ViT), with a decoder on top for predicting pixel values for masked patches. Videos are presented to the model as a sequence of fixed-size patches (resolution 16x16), which are linearly embedded. One also adds a [CLS] token to the beginning of a sequence to use it for classification tasks. One also adds fixed sinus/cosinus position embeddings before feeding the sequence to the layers of the Transformer encoder. By pre-training the model, it learns an inner representation of videos that can then be used to extract features useful for downstream tasks.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file."}}, "required": ["video_path"]}}, {"name": "MCG_NJU_videomae_large_finetuned_kinetics", "description": "VideoMAE model pre-trained for 1600 epochs in a self-supervised way and fine-tuned in a supervised way on Kinetics-400. It was introduced in the paper VideoMAE: Masked Autoencoders are Data-Efficient Learners for Self-Supervised Video Pre-Training by Tong et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file that the function will process."}}, "required": ["video_path"]}}, {"name": "MCG_NJU_videomae_base_short_finetuned_kinetics", "description": "VideoMAE model pre-trained for 800 epochs in a self-supervised way and fine-tuned in a supervised way on Kinetics-400. It was introduced in the paper VideoMAE: Masked Autoencoders are Data-Efficient Learners for Self-Supervised Video Pre-Training by Tong et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The file path to the video"}}, "required": ["video_path"]}}, {"name": "videomae_base_finetuned_RealLifeViolenceSituations_subset", "description": "This model is a fine-tuned version of MCG-NJU/videomae-base on an unknown dataset. It is trained for video classification task, specifically for RealLifeViolenceSituations.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The file path to the video file that needs to be classified"}}, "required": ["video_path"]}}, {"name": "fcakyon_timesformer_large_finetuned_k400", "description": "TimeSformer model pre-trained on Kinetics-400 for video classification into one of the 400 possible Kinetics-400 labels. Introduced in the paper 'TimeSformer: Is Space-Time Attention All You Need for Video Understanding?' by Tong et al.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file that needs to be classified"}}, "required": ["video_path"]}}, {"name": "fcakyon_timesformer_hr_finetuned_k400", "description": "TimeSformer model pre-trained on Kinetics-400 for video classification into one of the 400 possible Kinetics-400 labels. Introduced in the paper 'TimeSformer: Is Space-Time Attention All You Need for Video Understanding?' by Tong et al.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file that needs to be classified"}}, "required": ["video_path"]}}, {"name": "videomae_small_finetuned_kinetics", "description": "VideoMAE model pre-trained for 1600 epochs in a self-supervised way and fine-tuned in a supervised way on Kinetics-400. It was introduced in the paper VideoMAE: Masked Autoencoders are Data-Efficient Learners for Self-Supervised Video Pre-Training by Tong et al. and first released in this repository.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file that needs to be processed"}}, "required": ["video_path"]}}, {"name": "videomae_base_finetuned_ucf101_subset", "description": "This model is a fine-tuned version of MCG-NJU/videomae-base on an unknown dataset. It is used for video classification tasks.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file that needs to be classified"}}, "required": ["video_path"]}}, {"name": "sayakpaul_videomae_base_finetuned_ucf101_subset", "description": "This model is a fine-tuned version of MCG-NJU/videomae-base on an unknown dataset. It achieves the following results on the evaluation set: Loss: 0.3992, Accuracy: 0.8645.", "parameters": {"type": "object", "properties": {"video_file_path": {"type": "string", "description": "The file path of the video to be processed."}}, "required": ["video_file_path"]}}, {"name": "openai_clip_vit_base_patch32", "description": "The CLIP model was developed by researchers at OpenAI to learn about what contributes to robustness in computer vision tasks. The model was also developed to test the ability of models to generalize to arbitrary image classification tasks in a zero-shot manner.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path to the image"}, "labels": {"type": "string", "description": "The labels for image classification tasks"}}, "required": ["image_path", "labels"]}}, {"name": "openai_clip_vit_large_patch14", "description": "The CLIP model was developed by researchers at OpenAI to learn about what contributes to robustness in computer vision tasks. The model was also developed to test the ability of models to generalize to arbitrary image classification tasks in a zero-shot manner.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}, "labels": {"type": "string", "description": "The type of the argument is a string. It is likely that the argument 'labels' is used to pass a list of labels to the function. The function may use these labels to classify images or perform some other task related to image classification."}}, "required": ["image_path", "labels"]}}, {"name": "laion_clip_vit_bigG_14_laion2B_39B_b160k", "description": "A CLIP ViT-bigG/14 model trained with the LAION-2B English subset of LAION-5B using OpenCLIP. The model is intended for research purposes and enables researchers to better understand and explore zero-shot, arbitrary image classification. It can be used for interdisciplinary studies of the potential impact of such models. The model achieves a 80.1 zero-shot top-1 accuracy on ImageNet-1k.", "parameters": {"type": "object", "properties": {"image": {"type": "string", "description": "The image to be classified"}, "possible_class_names": {"type": "string", "description": "A list of possible class names that the model can classify an image into."}}, "required": ["image", "possible_class_names"]}}, {"name": "openai_clip_vit_base_patch16", "description": "The CLIP model was developed by researchers at OpenAI to learn about what contributes to robustness in computer vision tasks. The model was also developed to test the ability of models to generalize to arbitrary image classification tasks in a zero-shot manner.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that needs to be processed by the CLIP model."}, "labels": {"type": "string", "description": "The labels for the image classification tasks"}}, "required": ["image_path", "labels"]}}, {"name": "laion_clip_vit_b_16_laion2b_s34b_b88k", "description": "A CLIP ViT-B/16 model trained with the LAION-2B English subset of LAION-5B using OpenCLIP. This model is intended for research purposes and can be used for zero-shot image classification, image and text retrieval, and other related tasks.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that needs to be processed"}, "labels": {"type": "string", "description": "A list of labels that correspond to the image or text input"}}, "required": ["image_path", "labels"]}}, {"name": "patrickjohncyh_fashion_clip", "description": "FashionCLIP is a CLIP-based model developed to produce general product representations for fashion concepts. Leveraging the pre-trained checkpoint (ViT-B/32) released by OpenAI, it is trained on a large, high-quality novel fashion dataset to study whether domain specific fine-tuning of CLIP-like models is sufficient to produce product representations that are zero-shot transferable to entirely new datasets and tasks.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}, "labels": {"type": "string", "description": "The labels associated with the fashion concepts"}}, "required": ["image_path", "labels"]}}, {"name": "laion_clip_convnext_large_d_320_laion2B_s29B_b131K_ft_soup", "description": "A series of CLIP ConvNeXt-Large (w/ extra text depth, vision MLP head) models trained on the LAION-2B (english) subset of LAION-5B using OpenCLIP. The models utilize the timm ConvNeXt-Large model (convnext_large) as the image tower, a MLP (fc - gelu - drop - fc) head in vision tower instead of the single projection of other CLIP models, and a text tower with same width but 4 layers more depth than ViT-L / RN50x16 models (depth 16, embed dim 768).", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image file to be processed by the function."}, "labels": {"type": "string", "description": "The labels for classification tasks"}}, "required": ["image_path", "labels"]}}, {"name": "laion_clip_convnext_base_w_laion_aesthetic_s13B_b82K", "description": "A series of CLIP ConvNeXt-Base (w/ wide embed dim) models trained on subsets LAION-5B using OpenCLIP. These models achieve between 70.8 and 71.7 zero-shot top-1 accuracy on ImageNet-1k. They can be used for zero-shot image classification, image and text retrieval, and other tasks.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file"}, "labels": {"type": "string", "description": "The labels of the images for zero-shot image classification."}}, "required": ["image_path", "labels"]}}, {"name": "laion_clip_convnext_xxlarge_laion2B_s34B_b82K_augreg_soup", "description": "A series of CLIP ConvNeXt-XXLarge models trained on LAION-2B (English), a subset of LAION-5B, using OpenCLIP. These models achieve between 79.1 and 79.4 top-1 zero-shot accuracy on ImageNet-1k.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image to be processed."}, "labels": {"type": "string", "description": "The labels for the CLIP ConvNeXt-XXLarge models."}}, "required": ["image_path", "labels"]}}, {"name": "laion_clip_image_classification", "description": "A series of CLIP ConvNeXt-Base (w/ wide embed dim) models trained on subsets LAION-5B using OpenCLIP. The models utilize the timm ConvNeXt-Base model (convnext_base) as the image tower, and the same text tower as the RN50x4 (depth 12, embed dim 640) model from OpenAI CLIP.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the image to be classified."}, "class_names": {"type": "string", "description": "A list of class names corresponding to the image categories for classification."}}, "required": ["image_path", "class_names"]}}, {"name": "clip_rsicd_v2", "description": "This model is a fine-tuned CLIP by OpenAI. It is designed with an aim to improve zero-shot image classification, text-to-image and image-to-image retrieval specifically on remote sensing images.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}, "labels": {"type": "string", "description": "Labels used for image classification and retrieval"}}, "required": ["image_path", "labels"]}}, {"name": "tiny_random_CLIPSegModel", "description": "A tiny random CLIPSegModel for zero-shot image classification.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path or URL of the image to be classified."}, "labels": {"type": "string", "description": "The labels for zero-shot image classification."}}, "required": ["image_path", "labels"]}}, {"name": "timm_eva02_enormous_patch14_plus_clip_224_laion2b_s9b_b144k", "description": "This model is a zero-shot image classification model based on OpenCLIP. It can be used for classifying images into various categories without any additional training.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that needs to be classified"}, "labels": {"type": "string", "description": "The labels for the image categories"}}, "required": ["image_path", "labels"]}}, {"name": "laion_clip_convnext_large_d_laion2B_s26B_b102K_augreg", "description": "A series of CLIP ConvNeXt-Large (w/ extra text depth, vision MLP head) models trained on LAION-2B (english), a subset of LAION-5B, using OpenCLIP. The models are trained at 256x256 image resolution and achieve a 75.9 top-1 zero-shot accuracy on ImageNet-1k.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file to be processed."}, "classes": {"type": "string", "description": "The classes argument specifies the list of classes or labels for which the model has been trained on. It is used to classify the inputs into one of these classes."}}, "required": ["image_path", "classes"]}}, {"name": "laion_clip_convnext_large_d_320_laion2B_s29B_b131K_ft", "description": "A series of CLIP ConvNeXt-Large models trained on the LAION-2B (english) subset of LAION-5B using OpenCLIP. The models achieve between 75.9 and 76.9 top-1 zero-shot accuracy on ImageNet-1k.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file"}, "labels": {"type": "string", "description": "The labels for the images."}}, "required": ["image_path", "labels"]}}, {"name": "OFA_Sys_chinese_clip_vit_base_patch16", "description": "Chinese CLIP is a simple implementation of CLIP on a large-scale dataset of around 200 million Chinese image-text pairs. It uses ViT-B/16 as the image encoder and RoBERTa-wwm-base as the text encoder.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}, "labels": {"type": "string", "description": "The labels for the Chinese image-text pairs"}}, "required": ["image_path", "labels"]}}, {"name": "clip_vit_base_patch32_ko", "description": "Korean CLIP model trained by Making Monolingual Sentence Embeddings Multilingual using Knowledge Distillation. It is a zero-shot image classification model that can be used to classify images without any training data.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path or URL of the image to classify"}, "labels": {"type": "string", "description": "A list of labels for the images to be classified"}}, "required": ["image_path", "labels"]}}, {"name": "chinese_clip_vit_large_patch14", "description": "Chinese-CLIP-ViT-Large-Patch14 is a large version of the Chinese CLIP model, with ViT-L/14 as the image encoder and RoBERTa-wwm-base as the text encoder. Chinese CLIP is a simple implementation of CLIP on a large-scale dataset of around 200 million Chinese image-text pairs. It is designed for zero-shot image classification tasks.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file for classification."}, "labels": {"type": "string", "description": "The labels associated with the images"}}, "required": ["image_path", "labels"]}}, {"name": "clipseg_rd64_refined", "description": "CLIPSeg model with reduce dimension 64, refined (using a more complex convolution). It was introduced in the paper Image Segmentation Using Text and Image Prompts by Lddecke et al. and first released in this repository. This model is intended for zero-shot and one-shot image segmentation.", "parameters": {"type": "object", "properties": {"labels": {"type": "string", "description": "The labels for image segmentation"}, "image_path": {"type": "string", "description": "The path to the image file that needs to be segmented."}}, "required": ["labels", "image_path"]}}, {"name": "git_base", "description": "GIT (short for GenerativeImage2Text) model, base-sized version. It was introduced in the paper GIT: A Generative Image-to-text Transformer for Vision and Language by Wang et al. and first released in this repository. The model is trained using 'teacher forcing' on a lot of (image, text) pairs. The goal for the model is simply to predict the next text token, giving the image tokens and previous text tokens. This allows the model to be used for tasks like image and video captioning, visual question answering (VQA) on images and videos, and even image classification (by simply conditioning the model on the image and asking it to generate a class for it in text).", "parameters": {"type": "object", "properties": {"image": {"type": "string", "description": "The image tokens."}}, "required": ["image"]}}, {"name": "microsoft_table_transformer_structure_recognition", "description": "Table Transformer (DETR) model trained on PubTables1M for detecting the structure (like rows, columns) in tables.", "parameters": {"type": "object", "properties": {"api_key": {"type": "string", "description": "The API key for accessing the Table Transformer (DETR) model"}, "table_image_path": {"type": "string", "description": "The path to the image that contains the table."}}, "required": ["api_key", "table_image_path"]}}, {"name": "CompVis_ldm_celebahq_256", "description": "Latent Diffusion Models (LDMs) achieve state-of-the-art synthesis results on image data and beyond by decomposing the image formation process into a sequential application of denoising autoencoders. LDMs enable high-resolution synthesis, semantic scene synthesis, super-resolution, and image inpainting while significantly reducing computational requirements compared to pixel-based DMs.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path to the output directory where the synthesized images will be saved."}, "num_inference_steps": {"type": "integer", "description": "The number of inference steps to be performed in the Latent Diffusion Model (LDM)"}}, "required": ["output_path", "num_inference_steps"]}}, {"name": "ocariz_universe_1400", "description": "This model is a diffusion model for unconditional image generation of the universe trained for 1400 epochs.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path where the generated universe images will be saved"}}, "required": ["output_path"]}}, {"name": "google_ddpm_celebahq_256", "description": "Leveraging Denoising Diffusion Probabilistic Models (DDPM) for high-quality image synthesis, our model is trained on the unconditional CIFAR10 dataset and 256x256 LSUN, achieving outstanding results with a state-of-the-art FID score of 3.17 and an Inception score of 9.46. Remarkably, our model harnesses this technique to generate striking celebrity images.", "parameters": {"type": "object", "properties": {"api_key": {"type": "string", "description": "The API key used for accessing the DDPM model"}, "output_path": {"type": "string", "description": "The file path where the generated images will be saved"}}, "required": ["api_key", "output_path"]}}, {"name": "google_ncsnpp_ffhq_256", "description": "Utilizing Score-Based Generative Modeling via Stochastic Differential Equations (SDE) for unconditional image generation, our model attains unprecedented performance on CIFAR-10. It also marks a significant milestone by producing high-fidelity 1024 x 1024 images, a first for score-based generative models. Our model effectively employs this technique to generate human facial images.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path to save the generated images"}}, "required": ["output_path"]}}, {"name": "martinezomg_vit_base_patch16_224_diabetic_retinopathy", "description": "This model is a fine-tuned version of google/vit-base-patch16-224 on the None dataset. It is designed for image classification tasks, specifically for diabetic retinopathy detection.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that needs to be classified"}}, "required": ["image_path"]}}, {"name": "fxmarty_resnet_tiny_beans", "description": "A model trained on the beans dataset, just for testing and having a really tiny model.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file"}}, "required": ["image_path"]}}, {"name": "nvidia_mit_b0", "description": "The SegFormer encoder, fine-tuned on Imagenet-1k, is a key component introduced in the paper 'SegFormer: Simple and Efficient Design for Semantic Segmentation with Transformers' by Xie et al. Initially unveiled in this repository, SegFormer comprises a hierarchical Transformer encoder paired with a lightweight all-MLP decode head. This architecture yields impressive results on semantic segmentation benchmarks, notably ADE20K and Cityscapes. Furthermore, it exhibits remarkable performance in classifying cityscape images.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file for processing"}}, "required": ["image_path"]}}, {"name": "facebook_regnet_y_008", "description": "The RegNet model, trained on Imagenet-1k, is a significant component featured in the paper 'Designing Network Design Spaces.' It made its debut in this repository and serves as a versatile tool for image classification, providing relevant class outputs.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the image to be classified."}}, "required": ["image_path"]}}, {"name": "nlpconnect_vit_gpt2_image_captioning", "description": "An image captioning model that uses transformers to generate captions for input images. The model is based on the Illustrated Image Captioning using transformers approach.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the input image file"}}, "required": ["image_path"]}}, {"name": "promptcap_coco_vqa", "description": "PromptCap is a captioning model that can be controlled by natural language instruction. The instruction may contain a question that the user is interested in. It achieves SOTA performance on COCO captioning (150 CIDEr) and knowledge-based VQA tasks when paired with GPT-3 (60.4% on OK-VQA and 59.6% on A-OKVQA).", "parameters": {"type": "object", "properties": {"question": {"type": "string", "description": "The question or instruction provided to the PromptCap captioning model"}, "image_path": {"type": "string", "description": "The path to the image file for captioning"}}, "required": ["question", "image_path"]}}, {"name": "openai_clip_vit_base_patch32", "description": "This is an image captioning model training by Zayn", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file"}, "labels": {"type": "string", "description": "Labels are the captions corresponding to the images used for training the image captioning model."}}, "required": ["image_path", "labels"]}}, {"name": "blip2_flan_t5_xl", "description": "BLIP-2 model, leveraging Flan T5-xl (a large language model). It was introduced in the paper BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models by Li et al. and first released in this repository. The goal for the model is to predict the next text token, giving the query embeddings and the previous text. This allows the model to be used for tasks like image captioning, visual question answering (VQA), and chat-like conversations by feeding the image and the previous conversation as prompt to the model.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file that will be used as input to the BLIP-2 model"}, "question": {"type": "string", "description": "The previous text or conversation as prompt to the model."}}, "required": ["image_path", "question"]}}, {"name": "blip2_flan_t5_xxl", "description": "BLIP-2 model, leveraging Flan T5-xxl (a large language model). It was introduced in the paper BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models by Li et al. and first released in this repository. The model is used for tasks like image captioning, visual question answering (VQA), and chat-like conversations by feeding the image and the previous conversation as prompt to the model.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}, "question": {"type": "string", "description": "The question to be fed as the prompt to the BLIP-2 model"}}, "required": ["image_path", "question"]}}, {"name": "google_deplot", "description": "DePlot is a model that translates the image of a plot or chart to a linearized table. It decomposes the challenge of visual language reasoning into two steps: (1) plot-to-text translation, and (2) reasoning over the translated text. The output of DePlot can then be directly used to prompt a pretrained large language model (LLM), exploiting the few-shot reasoning capabilities of LLMs.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image of the plot or chart"}, "text": {"type": "string", "description": "The text to be translated from an image of a plot or chart to a linearized table"}}, "required": ["image_path", "text"]}}, {"name": "microsoft_resnet_18", "description": "ResNet model trained on imagenet-1k. It was introduced in the paper Deep Residual Learning for Image Recognition and first released in this repository. ResNet introduced residual connections, they allow to train networks with an unseen number of layers (up to 1000). ResNet won the 2015 ILSVRC & COCO competition, one important milestone in deep computer vision.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file."}}, "required": ["image_path"]}}, {"name": "facebook_convnext_base_224", "description": "ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them. The authors started from a ResNet and 'modernized' its design by taking the Swin Transformer as inspiration. You can use the raw model for image classification.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the input image."}}, "required": ["image_path"]}}, {"name": "facebook_convnext_tiny_224", "description": "ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them. It is trained on ImageNet-1k at resolution 224x224 and can be used for image classification.", "parameters": {"type": "object", "properties": {"image_Path": {"type": "string", "description": "The path to the image file."}}, "required": ["image_Path"]}}, {"name": "keremberke_yolov8s_pcb_defect_segmentation", "description": "YOLOv8s model for PCB defect segmentation. The model is trained to detect and segment PCB defects such as Dry_joint, Incorrect_installation, PCB_damage, and Short_circuit.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path of the image to be segmented for PCB defects"}}, "required": ["image_path"]}}, {"name": "lllyasviel_sd_controlnet_canny", "description": "ControlNet is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on Canny edges. It can be used in combination with Stable Diffusion.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path of the image to be used for the ControlNet with Canny edges"}, "output_path": {"type": "string", "description": "The path where the output will be saved"}, "low_threshold": {"type": "string", "description": "The description of the argument"}, "high_threshold": {"type": "string", "description": "The high threshold value for the Canny edge detection algorithm"}}, "required": ["image_path", "output_path"]}}, {"name": "lllyasviel_control_v11p_sd15_seg", "description": "ControlNet v1.1 is a neural network structure to control diffusion models by adding extra conditions. This checkpoint corresponds to the ControlNet conditioned on seg images. It can be used in combination with Stable Diffusion, such as runwayml/stable-diffusion-v1-5.", "parameters": {"type": "object", "properties": {"prompt": {"type": "string", "description": "The description of the argument"}, "control_image_path": {"type": "string", "description": "The path to the control image"}, "output_path": {"type": "string", "description": "The path where the output will be saved"}}, "required": ["prompt", "control_image_path", "output_path"]}}, {"name": "google_ddpm_cifar10_32", "description": "Denoising Diffusion Probabilistic Models (DDPM) is a class of latent variable models inspired by nonequilibrium thermodynamics. It is used for high-quality image synthesis. The model supports different noise schedulers such as scheduling_ddpm, scheduling_ddim, and scheduling_pndm.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path to the output directory for the generated images."}}, "required": ["output_path"]}}, {"name": "ceyda_butterfly_cropped_uniq1K_512", "description": "Butterfly GAN model based on the paper 'Towards Faster and Stabilized GAN Training for High-fidelity Few-shot Image Synthesis'. The model is intended for fun and learning purposes. It was trained on 1000 images from the huggan/smithsonian_butterflies_subset dataset, with a focus on low data training as mentioned in the paper. The model generates high-quality butterfly images.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The path to the directory where the generated butterfly images will be saved."}}, "required": ["output_path"]}}, {"name": "google_ddpm_bedroom_256", "description": "We present high quality image synthesis results using diffusion probabilistic models, a class of latent variable models inspired by considerations from nonequilibrium thermodynamics. Our best results are obtained by training on a weighted variational bound designed according to a novel connection between diffusion probabilistic models and denoising score matching with Langevin dynamics, and our models naturally admit a progressive lossy decompression scheme that can be interpreted as a generalization of autoregressive decoding. On the unconditional CIFAR10 dataset, we obtain an Inception score of 9.46 and a state-of-the-art FID score of 3.17. On 256x256 LSUN, we obtain sample quality similar to ProgressiveGAN.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The output path where the generated images will be saved."}}, "required": ["output_path"]}}, {"name": "google_ncsnpp_church_256", "description": "Score-Based Generative Modeling through Stochastic Differential Equations (SDE) for unconditional image generation. This model achieves record-breaking performance on CIFAR-10 and can generate high fidelity images of size 1024 x 1024.", "parameters": {"type": "object", "properties": {"output_path": {"type": "string", "description": "The output path to save the generated images"}}, "required": ["output_path"]}}, {"name": "facebook_timesformer_hr_finetuned_k600", "description": "TimeSformer model pre-trained on Kinetics-600. It was introduced in the paper TimeSformer: Is Space-Time Attention All You Need for Video Understanding? by Tong et al. and first released in this repository. The model can be used for video classification into one of the 600 possible Kinetics-600 labels.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The path to the video file that needs to be classified"}}, "required": ["video_path"]}}, {"name": "videomae_small_finetuned_ssv2", "description": "VideoMAE is an extension of Masked Autoencoders (MAE) to video. The architecture of the model is very similar to that of a standard Vision Transformer (ViT), with a decoder on top for predicting pixel values for masked patches. Videos are presented to the model as a sequence of fixed-size patches (resolution 16x16), which are linearly embedded. One also adds a [CLS] token to the beginning of a sequence to use it for classification tasks. One also adds fixed sinus/cosinus position embeddings before feeding the sequence to the layers of the Transformer encoder. By pre-training the model, it learns an inner representation of videos that can then be used to extract features useful for downstream tasks: if you have a dataset of labeled videos for instance, you can train a standard classifier by placing a linear layer on top of the pre-trained encoder. One typically places a linear layer on top of the [CLS] token, as the last hidden state of this token can be seen as a representation of an entire video.", "parameters": {"type": "object", "properties": {"video_path": {"type": "string", "description": "The file path of the video to be processed by the VideoMAE model."}}, "required": ["video_path"]}},  {"name": "videomae_base_finetuned_ucf101", "description": "VideoMAE Base model fine tuned on UCF101 for Video Action Recognition", "parameters": {"type": "object", "properties": {"file_path": {"type": "string", "description": "The path to the file that needs to be processed"}, "clip_len": {"type": "integer", "description": "The length of each video clip in frames"}}, "required": ["file_path"]}}, {"name": "laion_CLIP_convnext_base_w_laion2B_s13B_b82K", "description": "A series of CLIP ConvNeXt-Base (w/ wide embed dim) models trained on subsets LAION-5B using OpenCLIP. The models achieve between 70.8 and 71.7 zero-shot top-1 accuracy on ImageNet-1k. The models can be used for zero-shot image classification, image and text retrieval, and other related tasks.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The file path to the image file for classification, retrieval, or other related tasks."}, "labels": {"type": "string", "description": "The labels to be used for zero-shot image classification and other related tasks."}}, "required": ["image_path", "labels"]}}, {"name": "google_ddpm_cat_256", "description": "Our Denoising Diffusion Probabilistic Models (DDPM), inspired by nonequilibrium thermodynamics, excel in generating high-quality images through discrete noise schedulers like scheduling_ddpm, scheduling_ddim, and scheduling_pndm. Trained on both the unconditional CIFAR10 dataset and the challenging 256x256 LSUN dataset, the model achieves impressive scores, boasting an Inception score of 9.46 and a leading FID score of 3.17. Notably, our model effectively utilizes this technique to generate top-notch cat images.", "parameters": {"type": "object", "properties": {"output_image_path": {"type": "string", "description": "The path to the location where the generated output image will be saved"}}, "required": ["output_image_path"]}}, {"name": "hotdog_not_hotdog", "description": "A model that classifies images as hotdog or not hotdog.", "parameters": {"type": "object", "properties": {"image_path": {"type": "string", "description": "The path to the image file"}}, "required": ["image_path"]}}]